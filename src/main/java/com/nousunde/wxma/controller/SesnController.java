package com.nousunde.wxma.controller;

import cn.binarywang.wx.miniapp.api.WxMaService;
import cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;
import cn.binarywang.wx.miniapp.message.WxMaMessageRouter;
import com.nousunde.wxma.entity.Goods;
import com.nousunde.wxma.entity.User;
import com.nousunde.wxma.repository.GoodsRepository;
import com.nousunde.wxma.repository.SessionRepository;
import com.nousunde.wxma.repository.UserRepository;
import com.nousunde.wxma.utils.StateMsg;
import me.chanjar.weixin.common.error.WxErrorException;
import me.chanjar.weixin.common.session.StandardSessionManager;
import me.chanjar.weixin.common.session.WxSession;
import me.chanjar.weixin.common.session.WxSessionManager;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import javax.servlet.http.HttpServletRequest;
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/session") // This means URL's start with /session (after Application path)
public class SesnController {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private WxMaService wxService;

//    @Autowired
//    private WxMaMessageRouter wxMaMessageRouter;

    private final WxSessionManager sessionManager = new StandardSessionManager();

    private final SessionRepository sessionRepository;

    @Autowired
    public SesnController(SessionRepository springSessionRepository) {
        sessionRepository = springSessionRepository;
    }

    /**
     * open chat session, and encrypted key exchange
     *
     * @param jscode js_code
     * @return
     */
    @GetMapping(path = "/open")
    public @ResponseBody
    Map<String, Object> open(@RequestParam String jscode, HttpServletRequest request) throws WxErrorException {
        Map<String, Object> modelMap = new HashMap<String, Object>();
        logger.info("open chat session({})...", jscode);

//        if (StringUtils.isBlank(jscode)) {
//            modelMap.put("state", 501);
//            modelMap.put("errmsg", "empty jscode");
//            return modelMap;
//        }

        try {
//            UUID idGenerator = UUID.randomUUID();
//            String sessionId = idGenerator.toString();
//            sessionId = sessionId.replaceAll("-", "");
            String sessionId = (String) request.getAttribute("sessionid");
            logger.debug("  sessionId:{}", sessionId);
            if (sessionId.isEmpty() || sessionId.equals("")){
                StateMsg errNoSesnId = StateMsg.SVC_UNKNOWN_ERR;
                logger.error("   {}", errNoSesnId.toString());
                modelMap.put("state", errNoSesnId.getState());
                modelMap.put("errmsg", errNoSesnId.getErrmsg());
                return modelMap;
            }
//            WxSession sdriveSession = sessionManager.getSession(sessionId);
            WxSession sdriveSession = sessionRepository.getWxSessionResult(sessionId);
            if (sdriveSession == null){
                StateMsg errNoSesn = StateMsg.SVC_UNKNOWN_ERR;
                logger.error("   {}", errNoSesn.toString());
                modelMap.put("state", errNoSesn.getState());
                modelMap.put("errmsg", errNoSesn.getErrmsg());
                return modelMap;
            }
            WxMaJscode2SessionResult remoteSession = this.wxService.getUserService().getSessionInfo(jscode);

            sdriveSession.setAttribute("Openid", remoteSession.getOpenid());
            sdriveSession.setAttribute("SessionKey", remoteSession.getSessionKey());
            sdriveSession.setAttribute("Unionid", remoteSession.getUnionid());
            sdriveSession.setAttribute("CreateTime", new Date().getTime());
            sdriveSession.setAttribute("state", -1);

            if (sessionRepository.saveSession(sessionId, sdriveSession)) {
                logger.info("Bind local session with user session ({} {})", sessionId, remoteSession);
                modelMap.put("state", 0);
                modelMap.put("sessionid", sessionId);
                modelMap.put("errmsg", "");
            } else {
                modelMap.put("state", 500);
                modelMap.put("errmsg", "session and service bounding info occurred to failure");
            }

        } catch (Exception e) {
            this.logger.error(e.getMessage(), e);
            modelMap.put("state", 500);
            modelMap.put("errmsg", e.toString());
            return modelMap;
        }
        return modelMap;
    }
}
