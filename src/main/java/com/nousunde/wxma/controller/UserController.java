package com.nousunde.wxma.controller;

import cn.binarywang.wx.miniapp.api.WxMaService;
import cn.binarywang.wx.miniapp.bean.WxMaPhoneNumberInfo;
import cn.binarywang.wx.miniapp.bean.WxMaUserInfo;
import cn.binarywang.wx.miniapp.message.WxMaMessageRouter;
import com.nousunde.wxma.entity.Acs;
import com.nousunde.wxma.entity.User;
import com.nousunde.wxma.repository.SessionRepository;
import com.nousunde.wxma.repository.UserRepository;
import com.nousunde.wxma.service.AcsService;
import com.nousunde.wxma.service.UserSvc;
import com.nousunde.wxma.utils.JsonUtils;
import me.chanjar.weixin.common.session.StandardSessionManager;
import me.chanjar.weixin.common.session.WxSession;
import me.chanjar.weixin.common.session.WxSessionManager;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 微信小程序用户接口
 *
 *
 */
@Controller
@RestController
@RequestMapping("/user")
public class UserController {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * This means to get the bean called userRepository
     * Which is auto-generated by Spring, we will use it to handle the data
     */
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private WxMaService wxService;

    @Autowired
    private UserSvc userSvc;

    @Autowired
    private AcsService acsService;

    @Autowired
    private WxMaMessageRouter wxMaMessageRouter;

    private final WxSessionManager sessionManager = new StandardSessionManager();

    private final SessionRepository sessionRepository;

    @Autowired
    public UserController(SessionRepository springSessionRepository) {
        sessionRepository = springSessionRepository;
    }

    /**
     * 登陆接口
     */
    @RequestMapping(value = "/login")
    @ResponseBody public Map<String, Object> login(@RequestParam String sessionid, @RequestParam String username, @RequestParam String password) {
        Map<String, Object> modelMap = new HashMap<String, Object>();
        String userId = "";
        User currentUser = null;
        Acs acs = null;
        logger.info("open login({}, {}, {})...", sessionid, username, password);
//        if (StringUtils.isBlank(sessionid)) {
//            modelMap.put("state", 501);
//            modelMap.put("errmsg", "invalid session ID");
//            return modelMap;
//        }
//        if (StringUtils.isBlank(username) || StringUtils.isBlank(password)) {
//            modelMap.put("state", 501);
//            modelMap.put("errmsg", "invalid username or password");
//            return modelMap;
//        }

        try {
            WxSession storedSession = sessionRepository.getWxSessionResult(sessionid);

            currentUser = userSvc.getUserByAccount(username);
            if (currentUser == null) {
                modelMap.put("state", 502);
                modelMap.put("errmsg", "invalid username");
                return modelMap;
            }
            userId = currentUser.getUserId();
            if (userId == null || userId.isEmpty()) {
                modelMap.put("state", 502);
                modelMap.put("errmsg", "invalid username or password");
                return modelMap;
            }
            acs = acsService.getAcsByUserId(userId);
            if (acs == null) {
                logger.error("invalid username, pls check the account!");
                modelMap.put("state", 401);
                modelMap.put("errmsg", "Unauthorized error: invalid account");
                return modelMap;
            }

            if (!acs.getKeytab().equals(password)) {
                logger.error("the username and password doesn't match, pls check again!");
                modelMap.put("state", 401);
                modelMap.put("errmsg", "Unauthorized error: invalid account or password");
                return modelMap;
            } else {
                logger.info("---> username and password match!");
            }

            acs.setStatues((short) 0);
            acs.setLastActiveTime(new Date().getTime());
            acsService.updateAcs(acs);

            logger.info("WxSession state: {}", storedSession.getAttribute("state").toString());
            if (storedSession.getAttribute("state").equals(-1)) {
                storedSession.setAttribute("state", 0);
                storedSession.setAttribute("CreateTime", new Date().getTime());
            }

            storedSession.setAttribute("UserId", userId);
            storedSession.setAttribute("UserMod", acs.getUserMod());
            if (sessionRepository.saveSession(sessionid, storedSession)) {
                logger.info("---> updating local session with user session ({} {})", sessionid, storedSession);
            }
            //response to the minapp
            modelMap.put("state", 0);
            modelMap.put("errmsg", "");
            modelMap.put("accountid", acs.getUserId());
            modelMap.put("name", currentUser.getDisplayName());
            modelMap.put("user_mod", acs.getUserMod());
            logger.info("---> Login {}", modelMap.toString());
            return modelMap;
        } catch (Exception e) {
            this.logger.error(e.getMessage(), e);
            modelMap.put("state", 500);
            modelMap.put("errmsg", e.toString());
            return modelMap;
        }
    }

    @RequestMapping(value = "/register")
    @ResponseBody
    public Map<String, Object> register(@RequestParam String sessionid, @RequestParam String dispname, @RequestParam String username, @RequestParam String password) {
        Map<String, Object> modelMap = new HashMap<String, Object>();
        String userId = "";

        logger.info("open register({}, {}, {}, {})...", sessionid, dispname, username, password);
//        if (StringUtils.isBlank(sessionid)) {
//            modelMap.put("state", 501);
//            modelMap.put("errmsg", "invalid session ID");
//            return modelMap;
//        }
//        if (StringUtils.isBlank(username) || StringUtils.isBlank(password)) {
//
//            modelMap.put("state", 501);
//            modelMap.put("errmsg", "invalid username or password");
//            return modelMap;
//        }

        try {
            WxSession storedSession = sessionRepository.getWxSessionResult(sessionid);
//            if (storedSession == null) {
//                logger.error("invalid session ID, pls check the session status!");
//                modelMap.put("state", 401);
//                modelMap.put("errmsg", "Unauthorized error: invalid session ID");
//                //TODO comment for test
////                return modelMap;
//            }

            //check username
//            if (userSvc.getUserByAccount(username) != null) {
//                modelMap.put("state", 502);
//                modelMap.put("errmsg", "invalid username, already exist!");
//                return modelMap;
//            }
            User currentUser = null;
            currentUser = userSvc.getUserByAccount(username);
            if (currentUser != null) {
                modelMap.put("state", 502);
                modelMap.put("errmsg", "invalid username, already exist!");
                return modelMap;
            }

            User u = new User();
            u.setUserName(username);
            u.setDisplayName(dispname);
            u.setCreateTime(new Date().getTime());
            userSvc.addUser(u);
            currentUser = userSvc.getUserByAccount(username);
            logger.info("{}", currentUser.toString());
            if (currentUser == null) {
                modelMap.put("state", 502);
                modelMap.put("errmsg", "create user failed!");
                return modelMap;
            }
            userId = currentUser.getUserId();
//            if (userId == null || userId.isEmpty()) {
//                modelMap.put("state", 502);
//                modelMap.put("errmsg", "invalid username or password");
//                return modelMap;
//            }
            Acs acs = new Acs();
            acs.setUserMod((short) 4430);
            acs.setKeytab(password);
            acs.setUserId(userId);
            acs.setStatues((short) -1);
            acs.setAuthmeth("Base64");
            acs.setLastActiveTime(new Date().getTime());
            acsService.addAcs(acs);
            Acs acsCheck = acsService.getAcsByUserId(userId);
            if (acsCheck == null) {
                logger.error("create user security info failed!");
                modelMap.put("state", 401);
                modelMap.put("errmsg", "encrypt account error");
                return modelMap;
            } else {
                if (acsCheck.getAcsId().isEmpty() || acsCheck.getAcsId() == "") {
                    logger.error("create user acs info failed!");
                    modelMap.put("state", 401);
                    modelMap.put("errmsg", "encrypt acs error");
                    return modelMap;
                }
            }

            if (storedSession.getAttribute("state") != null) {
                logger.info("WxSession state: {}", storedSession.getAttribute("state").toString());
                if (storedSession.getAttribute("state").equals(-1)) {
                    storedSession.setAttribute("state", 0);
                    storedSession.setAttribute("CreateTime", new Date().getTime());
                }
                storedSession.setAttribute("UserId", userId);
                storedSession.setAttribute("UserMod", acs.getUserMod());
                if (sessionRepository.saveSession(sessionid, storedSession)) {
                    logger.info("---> updating local session with user session ({} {})", sessionid, storedSession);
                }
            }

            //response to the minapp
            modelMap.put("state", 0);
            modelMap.put("errmsg", "");
            modelMap.put("accountid", userId);
            modelMap.put("name", currentUser.getDisplayName());
            modelMap.put("user_mod", acs.getUserMod());
            logger.info("---> success response with {}", modelMap.toString());
            return modelMap;
        } catch (Exception e) {
            this.logger.error(e.getMessage(), e);
            modelMap.put("state", 500);
            modelMap.put("errmsg", e.toString());
            return modelMap;
        }
    }

    /**
     * <pre>
     * 用户信息接口
     * http://207t57g071.imwork.net:11517/wechat/user/info?encryptedData=iUUGjGgldXqqsPB7WwhzjMnmuNf4oSm1MfCvdx12yO0g3
     * MF7cK8q69QX9b1d9YU9Jf%2FQk20KEoMPcMYYA4j5cQkma%2Bz%2Fhyc%2BtmLqLNLf7AvoPWF66T78oalRd%2FEHdiF35lcxu0hvFzzuXyz3kix
     * VIz6FGUYZIJYFdooPeB1%2BedO%2Ftry4%2BmRlgF4ysNBCDWsDsxBGB8EG7pG7SDENjEiOg0kWWlnQMf6MH%2BfWamKiN6ub5Tp2CRD9NYgdhAV
     * YOToAoxXeUyu44MMP5KZF%2FhTF0mihcSWjnWwcxlSCuwJSpnJWKDK%2BBtWEZKbSfWRY42EMnQt2cgdJEw4avG2HKjQyskNWM1Jw%2BObPlH301
     * JVAAeIIM6DLdOYXu81oPYNosd6qjS29i1PuFuCTchfgScPstz92IUFP276MQd9KmpQJoC1pW%2B6vMOqoDIV3nsyWtgVH3GjzMTPeR2%2Fz9QE1y
     * 645zA%3D%3D
     * &iv=eTZaEOsXj5XGGdHiiblrCQ%3D%3D
     * &signature=488630cda341cad6be7393576c7a2e29b8e1bf59
     * </pre>
     */
//    @GetMapping("/info")
//    public String info(String sessionKey, String signature, String rawData, String encryptedData, String iv) {
    @RequestMapping(value = "/info")
    @ResponseBody
    public Map<String, Object> info(@RequestParam String sessionId, @RequestParam String rawData, @RequestParam String encryptedData,
                                    @RequestParam String iv, @RequestParam String signature) {
        Map<String, Object> modelMap = new HashMap<String, Object>();
        logger.info("open info({}, {}, {})...", sessionId, iv, signature);
        if (StringUtils.isBlank(sessionId)) {
            modelMap.put("state", 501);
            modelMap.put("errmsg", "invalid session ID");
            return modelMap;
        }
        if (StringUtils.isBlank(rawData) || StringUtils.isBlank(signature)) {

            modelMap.put("state", 501);
            modelMap.put("errmsg", "invalid rawData or signature");
            return modelMap;
        }

        WxSession storedSession = sessionRepository.getWxSessionResult(sessionId);
        if (storedSession == null) {
            logger.error("invalid session ID, pls check the session status!");
            modelMap.put("state", 401);
            modelMap.put("errmsg", "Unauthorized error: invalid session ID");
            return modelMap;
        }
        String sessionKey = storedSession.getAttribute("SessionKey").toString();
        // 用户信息校验
        if (!this.wxService.getUserService().checkUserInfo(sessionKey, rawData, signature)) {
//            return "user check failed";
            logger.error("user check failed, pls check the user info!");
            modelMap.put("state", 401);
            modelMap.put("errmsg", "Unauthorized error: invalid user info");
            return modelMap;
        }

        // 解密用户信息
        WxMaUserInfo decryptInfo = this.wxService.getUserService().getUserInfo(sessionKey, encryptedData, iv);
        logger.info(JsonUtils.toJson(decryptInfo));
        String userId = null;
        if (storedSession.getAttribute("UserId") != null) {
            userId = storedSession.getAttribute("UserId").toString();
            User currentUser = userSvc.getUserById(userId);
            if (currentUser != null) {
                currentUser.setNickName(decryptInfo.getNickName());
                currentUser.setSex(Short.valueOf(decryptInfo.getGender()));
                currentUser.setCity(decryptInfo.getCity());
                currentUser.setProvince(decryptInfo.getProvince());
                currentUser.setHeadImgUrl(decryptInfo.getAvatarUrl());
                userSvc.updateUser(currentUser);
            } else {
                //沒有登陸的情況
            }
        }

        storedSession.setAttribute("Openid", decryptInfo.getOpenId());
        if (sessionRepository.saveSession(sessionId, storedSession)) {
            logger.info("---> updating local session with user session ({} {})", sessionId, storedSession);
        }
        modelMap.put("state", 0);
        modelMap.put("nickName", decryptInfo.getNickName());
        return modelMap;
    }

    /**
     * <pre>
     * 获取用户绑定手机号信息
     * </pre>
     */
//    @GetMapping("/phone")
//    public String phone(String sessionKey, String signature, String rawData, String encryptedData, String iv) {
//        // 用户信息校验
//        if (!this.wxService.getUserService().checkUserInfo(sessionKey, rawData, signature)) {
//            return "user check failed";
//        }
//
//        // 解密
//        WxMaPhoneNumberInfo phoneNoInfo = this.wxService.getUserService().getPhoneNoInfo(sessionKey, encryptedData, iv);
//
//        return JsonUtils.toJson(phoneNoInfo);
//    }

}
